include:
 - local: templates.yml
 - template: Security/SAST.gitlab-ci.yml
 - project: 'templates/ci'
   file: 'DockerInDockerTemplate.yml'

variables:
  SAST_EXCLUDED_ANALYZERS: "nodejs-scan-sast"

stages:
- build
- notify
- test
- release
- deploy
- smoke-test

build:
   stage: build
   image: docker:20.10.12-dind-rootless
   only:
     changes:
       - backend-report/**/*
   before_script:
     - until docker info; do sleep 1; done
     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
   script:
     - cd backend-report
     - >
       docker build
       --tag $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA
       .
     - docker push $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA

sast:
  stage: test

spotbugs-sast:
  stage: test

sonarqube-test:
  stage: test
  only:
    changes:
      - backend-report/**/*
  image: sonarsource/sonar-scanner-cli:5.0
  script:
    - cd backend-report
    - >
      sonar-scanner -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SQ_PROJECT_KEY_BACKEND_REPORT}
      -Dsonar.projectName=${SQ_PROJECT_KEY_BACKEND_REPORT}
      -Dsonar.sources=.
      -Dsonar.host.url=${SQ_URL}
      -Dsonar.login=${SQ_BACKEND_REPORT}

#unit-tests:
#  stage: test
#  only:
#    changes:
#      - backend-report/**/*
#  image: python:3.9.0-slim
#  script:
#    - cd backend-report
#    - pip install -r requirements.txt
#    - python3 -m unittest

release:
   variables:
     GIT_STRATEGY: none
   image: docker:20.10.12-dind-rootless
   stage: release
   only:
     changes:
       - backend-report/**/*
   before_script:
     - until docker info; do sleep 1; done
     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
   script:
     - docker pull $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA
     - docker tag $CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-backend-report:latest
     - docker push $CI_REGISTRY_IMAGE/sausage-backend-report:latest

deploy:
  extends: .deploy
  script:
    - docker context create remote --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
    - docker-compose --context remote up -d --force-recreate backend-report

stop_deploy:
  stage: deploy
#  rules:
#    - when: manual
  script:
    - echo "Remove sausage store environment"
  environment:
    name: production
    url: http://${DEV_HOST}:80
    action: stop

